@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using SeaHome.Services

@inject IWebHostEnvironment Environment
@inject IJSRuntime qqq
@inject TransientService transientApartment
@inject SingletonService singleton


<h4>Добавьте изображение</h4>

@*<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>*@

@*<form>
    <div class="form-group">
        <label for="FormControlFile1">загрузить фото</label>
        <input type="file" class="form-control-file" id="FormControlFile1">
      </div>
</form>*@

<p>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple="multiple" />
    
</p>


@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    //User user = new User();
    [Inject] GridFSService service{ get; set; }
    

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 15000000;
    private int maxAllowedFiles = 8;
    private bool isLoading;
    protected byte[] img;
    

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        Apartament apartament = singleton.currentApartament;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                //var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var stream = file.OpenReadStream(maxFileSize);
                img = new byte[stream.Length];
                //await stream.ReadAsync(img);
                
                //Apartament apartament = transientApartment.currentApartament;
                await service.UploadImageToDBAsync(stream, file.Name);
                
                isLoading = false;
                //ImgToDb.AddToDB(new ImgToDb(apartament, img, file.Name));
                DBMethods.AddImgToDB(new ImgToDb(apartament, file.Name));
            }

            catch (Exception ex)
            {
                await qqq.InvokeVoidAsync("logError", ex);
            }
        }
 
    }
}
